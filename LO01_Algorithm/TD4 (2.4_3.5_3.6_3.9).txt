===========================2.4=====================
1.1
Data:
The number of terms used: an integer(> 0), entered through the keyboard.
The number of x(-1 < x <= 1), entered through the keyboard.
Results:
The approximation of ln(1 + x) of the requested order: a real value displayed on the screen.

1.2
R(1) = x;   S(1) = (-1) * (x ^ 2)
R(2) = R(1) + S(1) / 2;  S(2) = S(1) * (-1) * x 
R(3) = R(2) + S(2) / 3;  S(3) = S(2) * (-1) * x 
.
.
.
R(n) = R(n - 1) + S(n - 1) / n
S(n) = S(n - 1) * (-1) * x

1.3
Analysis:
1. Store the value of N (an integer) and x (a real).
2. Set R (a real) with the value of x
3. Set S (a real) with the value of -1 * x * x
4. Repeat N - 1 times (i from 2 to N)
	1. Calculate R + S / i and stored in R
	2. Calculate -S * x and stored in S
5. Displayed the final value of R

1.4
Algorithm Natural_Logarithm
Variables:
	N, i : Integers
	x, R, S : Reals
Instructions:
	Write("Enter the number of terms: "!)
	Read(KBD ! N)
	Write("Enter the number of x: "!)
	Read(KBD ! x)
	R <- x
	S <- (-1 * x * x)
	For i From 2 to N step 1
		R <- R + S / i
		S <- -S * x
	EndFor
	Write("The approximation of ln(1 + x) is: ", R !)
END Natural_Logarithm


2.1
Data:
The upper bound of the error's absolute value: a real(> 0), entered through the keyboard.
The number of x(-1 < x <= 1), entered through the keyboard.
Results:
The approximation of ln(1 + x) : a real value displayed on the screen.

2.2
R(1) = x;   S(1) = (-1) * (x ^ 2)
R(2) = R(1) + S(1) / 2;  S(2) = S(1) * (-1) * x 
R(3) = R(2) + S(2) / 3;  S(3) = S(2) * (-1) * x 
.
.
.
R(n) = R(n - 1) + S(n - 1) / n
S(n) = S(n - 1) * (-1) * x

E(1) =  (|x| ^ 2) / (1 - |x|) / 2
E(2) =  E(1) * |x| * 2 / 3
...
E(n) = E(n - 1) * |x| * n / (n + 1)


2.3
Analysis:
1. Store the value of e (a real) and x (a real).
2. Set R (a real) with the value of x
3. Set S (a real) with the value of -1 * x * x
4. Set E with the value of (|x| ^ 2) / (1 - |x|) / 2
5. Set n with the value of 1
4. Repeat until E < e
	1. Calculate n + 1 and stored in n
	2. Calculate R + S / n and stored in R
	3. Calculate -S * x and stored in S
	4. Calculate E * |x| * n / (n + 1) and stored in E
5. Displayed the final value of R

==================================2.4
Algorithm Natural_Logarithm_2
Variables:
	e, x, R, S, E, absx: Reals
	n : Integer
Instructions:
	Write("Enter the upper bound of the error's absolute value: " !)
	Read(KBD ! e)
	Write("Enter the number of x: "!)
	Read(KBD ! x)
	R <- x
	S <- (-1 * x * x)
	If x > 0 Then
		absx <- x
	Else
		absx <- (-x)
	EndIf
	E <- absx * absx / (1 - absx) / 2
	n <- 1
	While E >= e Do
		n <- n + 1
		R <- R + S / n
		S <- -S * x
		E <- E * absx * n / (n + 1)
	EndWhile
	Write("The approximation of ln(1 + x) is: ", R !)
END Natural_Logarithm_2


========================================3.5============
Algorithm PI/4
Variables:
	N, sign, n: Integers
	Val : Real
Instructions:
	Write("Enter the desired number of terms: " !)
	Read(KBD ! N)
	Val <- 1
	sign <- 1
	For n From 2 to N
		sign <- (-sign)
		Val <- Val + sign / (2 * n - 1)	
	EndFor
	Write("The approximation of PI/4 is: ", Val !)
END PI/4

====================================== 3.6===========
Algorithm PI/4_2
Variables:
	bound, Val, upbound : Reals
	sign, n : Integers
Instructions:
	Write("Enter the upper boun of the error: " !)
	Read(KBD ! bound)
	n <- 1
	Val <- 1
	sign <- 1
	upbound <- 1 / (2 * n + 1)
	While upbound >= bound Do
		n <- n + 1
		upbound <- 1 / (2 * n + 1)
		sign <- (-sign)
		Val <- Val + sign / (2 * n - 1)	
	EndWhile
	Write("The approximation of PI/4 is: ", Val !)
END PI/4_2

================================================3.9
1
Data:
The number of terms used: an integer(> 0), entered through the keyboard.
The number of x: a real, entered through the keyboard.
Results:
The approximation value of exponential: a real, displayed on the screen.

2
R(1) = 1;                S(1) = (x ^ 1) / 1 !
R(2) = R(1) + S(1);      S(2) = S(1) * x / 2
R(3) = R(2) + S(2);      S(3) = s(2) * x / 3
...
R(n) = R(n - 1) + S(n - 1)
S(n) = S(n - 1) * x / n

3
Analysis:
Enter the desired number of terms and the number of x: variable N and variable x.
Only one variable Val is needed to store the successive values of R(n). Likewise, only one variable S is needed to store the successive values of S(n).
The approximation of exponential is computed through a count-controlled loop working with a variable n that ranges from 2 to N. 
Within this loop, the consecutive values of R(n) are computed (and stored in Val) according to the recurrence relation R(n) = R(n - 1) + S(n - 1) and the successive S(n) (stored in S) according to the recurrence relation S(n) = S(n - 1) * x / n. Before entering the loop, Val and S have to be initialized.

4
Algorithm Exponential_1
Variables:
	N, n : Integers
	x, Val, S: Reals
Instructions:
	Write("Enter the desired number of terms: "!)
	Read(KBD ! N)
	Write("Enter the number of x: ")
	Read(KBD ! x)
	Val <- 1
	S <- x
	For n From 2 to N step 1
		Val <- Val + S
		S <- S * x / n
	EndFor
	Write("The approximation value of exponential: ", Val !)
END Exponential_1







